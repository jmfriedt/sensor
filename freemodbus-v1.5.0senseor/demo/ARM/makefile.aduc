
#
# FreeModbus MSP430 port Makefile
#
# Copyright (c) 2006 Christian Walter, Vienna 2006.
#
# $Id: Makefile,v 1.3 2007/06/12 06:42:01 wolti Exp $
#
# ---------------------------------------------------------------------------

BASE        = /usr/
CC	    = arm-none-eabi-gcc
LD          = arm-none-eabi-ld
CXX	    = arm-none-eabi-g++
OBJCOPY	    = arm-none-eabi-objcopy
SIZE	    = arm-none-eabi-size

MCU      = arm7tdmi
SUBMDL   = ADuC7026
MB_INC      = -I../../modbus/rtu/  -I../../modbus/ascii/ \
              -I../../modbus/include/ -I include/
ASFLAGS     = -MD -g -mmcu=$(MCU)
LDFLAGS     = -g -mmcu=$(MCU)
TGT         = demo

MB_SRC      = $(addprefix ../../modbus/, mb.c )
MB_RTU_SRC  = $(addprefix ../../modbus/rtu/, mbrtu.c mbcrc.c )
MB_ASCII_SRC= $(addprefix ../../modbus/ascii/, mbascii.c )
MB_FUNC_SRC = $(addprefix ../../modbus/functions/, mbfunccoils.c \
              mbfuncdiag.c mbfuncholding.c mbfuncinput.c mbfuncother.c \
              mbfuncdisc.c mbutils.c) 
PORT_SRC    = $(addprefix ./, init_aduc.c DDSvar.c portevent.c irq.c startup.c )
CSRC        = demo.c \
              $(MB_SRC) $(MB_RTU_SRC) $(MB_ASCII_SRC) $(MB_FUNC_SRC) \
              $(PORT_SRC)
ASRC        = 

OBJS        = $(CSRC:.c=.o) $(ASRC:.S=.o)
DEPS        = $(OBJS:.o=.d)
BIN         = $(TGT).elf

.PHONY: clean all

all: $(BIN)

flash-programm: $(TGT).elf

flash-verify:

flash-erase:

$(BIN): $(OBJS)
	$(CC) $(LDFLAGS) $(OBJS) $(LDLIBS) -o $@
	$(OBJCOPY) -O ihex $@ demo.hex
 

clean:
	rm -f $(DEPS)
	rm -f $(OBJS)
	rm -f $(BIN) $(TGT).map *.lst

# ---------------------------------------------------------------------------
# rules for code generation
# ---------------------------------------------------------------------------
%.o:    %.c
	$(CC) $(CFLAGS) -o $@ -c $<

%.o:    %.S
	$(CC) $(ASFLAGS) -o $@ -c $<

# ---------------------------------------------------------------------------
#  # compiler generated dependencies
# ---------------------------------------------------------------------------
-include $(DEPS)




THUMB    = # -mthumb

## Create ROM-Image (final)
RUN_MODE=ROM_RUN

# Target file name (without extension).
#TARGET = DDS
TARGET = modbus

SRCARM = irq.c

# List Assembler source files here which must be assembled in ARM-Mode..
ASRCARM = startup.S   
# modif jmfriedt : crt0.o par defaut ne marche pas

## Output format. (can be ihex or binary)
FORMAT = ihex

# Optimization level, can be [0, 1, 2, 3, s]. 
# 0 = turn off optimization. s = optimize for size.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = 1
#OPT = 3

# List any extra directories to look for include files here.
EXTRAINCDIRS = ./include

# List any extra directories to look for library files here.
EXTRA_LIBDIRS = 


# Compiler flag to set the C Standard level.
# gnu99 - c99 plus GCC extensions
CSTANDARD = -std=gnu99

# Place -D or -U options for C here
CDEFS =  -D$(RUN_MODE) -Daduc -DARM

# Place -I options here
CINCS = -I. 

# Place -D or -U options for ASM here
ADEFS =  -D$(RUN_MODE)

ifdef VECTOR_LOCATION
CDEFS += -D$(VECTOR_LOCATION)
ADEFS += -D$(VECTOR_LOCATION)
endif





# Compiler flags.
#  -g*:          generate debugging information
#  -O*:          optimization level
#  -f...:        tuning, see GCC manual and avr-libc documentation
#  -Wall...:     warning level
#  -Wa,...:      tell GCC to pass this to the assembler.
#    -adhlns...: create assembler listing
#
# Flags for C and C++ (arm-elf-gcc/arm-elf-g++)
CFLAGS  = -mcpu=$(MCU) $(THUMB_IW) -I. $(GENDEPFLAGS) $(MB_INC)
CFLAGS += $(CDEFS) $(CINCS)
CFLAGS += -O$(OPT)
CFLAGS += -Wall -Wcast-align -Wimplicit 
CFLAGS += -Wpointer-arith -Wswitch
CFLAGS += -Wredundant-decls -Wreturn-type -Wshadow -Wunused
CFLAGS += -Wa,-adhlns=$(subst $(suffix $<),.lst,$<) 
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))

# flags only for C
CONLYFLAGS += -Wnested-externs 
CONLYFLAGS += $(CSTANDARD)

CFLAGS += -Wcast-qual -fno-omit-frame-pointer
CONLYFLAGS += -Wmissing-prototypes 
CONLYFLAGS += -Wstrict-prototypes
CONLYFLAGS += -Wmissing-declarations

# flags only for C++ (arm-elf-g++)
# CPPFLAGS = -fno-rtti -fno-exceptions
CPPFLAGS = 

# Assembler flags.
#  -ahlms:    create listing
ASFLAGS = $(ADEFS) -Wa,-adhlns=$(<:.S=.lst)


# Extra libraries
EXTRA_LIBS =

MATH_LIB = 

# Linker flags.
#  -Wl,...:     tell GCC to pass this to linker.
#    -Map:      create map file
#    --cref:    add cross reference to  map file

LDFLAGS = -nostartfiles -Wl,-Map=$(TARGET).map,--cref
#LDFLAGS = -Wl,-Map=$(TARGET).map,--cref

LDFLAGS += $(NEWLIBLPC) $(MATH_LIB)
LDFLAGS += $(CPLUSPLUS_LIB)
LDFLAGS += $(patsubst %,-L%,$(EXTRA_LIBDIRS))
LDFLAGS += $(patsubst %,-l%,$(EXTRA_LIBS))

# Set Linker-Script Depending On Selected Memory and Controller
ifeq ($(RUN_MODE),RAM_RUN)
LDFLAGS +=-T$(SUBMDL)-RAM.ld
else 
LDFLAGS +=-T$(SUBMDL)-ROM.ld -Wall -Wcast-align -Wimplicit  -Wpointer-arith -Wswitch -Wredundant-decls -Wreturn-type -Wshadow -Wunused -Wa,-adhlns=startup.lst -Wcast-qual -fno-omit-frame-pointer -nostartfiles -Wl,-Map=modbus.map,--cref
endif

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ASFLAGS += -mcpu=$(MCU) $(THUMB_IW) -I. -x assembler-with-cpp


version.h:
	echo "#define VERSION \"ver. 0." `svnversion`WRC\" > version.h

